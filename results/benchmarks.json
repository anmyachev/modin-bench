{
    "benchmarks.TimeArithmetic.time_apply": {
        "code": "class TimeArithmetic:\n    def time_apply(self, impl, data_type, data_size, axis):\n        self.df.apply(lambda df: df.sum(), axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeArithmetic.time_apply",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "axis"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "125ec85f9dca42d30578c2ea0a61e865b60a929f73213d23a03ac03054fd7b10",
        "warmup_time": -1
    },
    "benchmarks.TimeArithmetic.time_median": {
        "code": "class TimeArithmetic:\n    def time_median(self, impl, data_type, data_size, axis):\n        self.df.median(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeArithmetic.time_median",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "axis"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "228aba9897daf979d80378ead60e8bd3f70fc7a6c0d7092c7042797c676d5951",
        "warmup_time": -1
    },
    "benchmarks.TimeArithmetic.time_nunique": {
        "code": "class TimeArithmetic:\n    def time_nunique(self, impl, data_type, data_size, axis):\n        self.df.nunique(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeArithmetic.time_nunique",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "axis"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "668fc4fe0bd2551aa7e577b5cd1d51ef457786f2ddf0c95d3ca05b0ad12db380",
        "warmup_time": -1
    },
    "benchmarks.TimeArithmetic.time_sum": {
        "code": "class TimeArithmetic:\n    def time_sum(self, impl, data_type, data_size, axis):\n        self.df.sum(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeArithmetic.time_sum",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "axis"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d68f8547236a8e4fc42bdcec247f7389ac8781248b368f9f4386ea0cbaff7a8a",
        "warmup_time": -1
    },
    "benchmarks.TimeBinaryOp.time_binary_op": {
        "code": "class TimeBinaryOp:\n    def time_binary_op(self, data_type, data_size, binary_op, axis):\n        self.op(self.df2, axis=axis)\n\n    def setup(self, data_type, data_size, binary_op, axis):\n        # shape for generate_dataframe: first - ncols, second - nrows\n        self.df1 = generate_dataframe(\n            \"modin\", data_type, data_size[1], data_size[0], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            \"modin\", data_type, data_size[3], data_size[2], RAND_LOW, RAND_HIGH\n        )\n        self.op = getattr(self.df1, binary_op)",
        "min_run_count": 2,
        "name": "benchmarks.TimeBinaryOp.time_binary_op",
        "number": 0,
        "param_names": [
            "data_type",
            "data_size",
            "binary_op",
            "axis"
        ],
        "params": [
            [
                "'int'"
            ],
            [
                "(10128, 100, 10000, 128)"
            ],
            [
                "'mul'"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b35b2035f28456ea602e23738321dfc336204725e7cf00810f76cf51b917cabc",
        "warmup_time": -1
    },
    "benchmarks.TimeConcat.time_concat": {
        "code": "class TimeConcat:\n    def time_concat(self, data_type, data_size, how, axis):\n        pd.concat([self.df1, self.df2], axis=axis, join=how)\n\n    def setup(self, data_type, data_size, how, axis):\n        # shape for generate_dataframe: first - ncols, second - nrows\n        self.df1 = generate_dataframe(\n            \"modin\", data_type, data_size[1], data_size[0], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            \"modin\", data_type, data_size[3], data_size[2], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeConcat.time_concat",
        "number": 0,
        "param_names": [
            "data_type",
            "data_size",
            "how",
            "axis"
        ],
        "params": [
            [
                "'int'"
            ],
            [
                "(10128, 100, 10000, 128)"
            ],
            [
                "'inner'"
            ],
            [
                "0",
                "1"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6b69a79684a591313b84d7a990ae2beca47e5a791cfcee26644bc203152bc7f1",
        "warmup_time": -1
    },
    "benchmarks.TimeGroupBy.time_groupby_count": {
        "code": "class TimeGroupBy:\n    def time_groupby_count(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).count()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeGroupBy.time_groupby_count",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d34a960748fd6de8f815df199a9caeb5c68b8d97961440a631fe91193c5b027",
        "warmup_time": -1
    },
    "benchmarks.TimeGroupBy.time_groupby_mean": {
        "code": "class TimeGroupBy:\n    def time_groupby_mean(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).mean()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeGroupBy.time_groupby_mean",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "51c7772a616cf72e00c3e5e139af5aa8562efda1cc59fbebc68c5555f79b6347",
        "warmup_time": -1
    },
    "benchmarks.TimeGroupBy.time_groupby_sum": {
        "code": "class TimeGroupBy:\n    def time_groupby_sum(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).sum()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeGroupBy.time_groupby_sum",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100)"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f6b2d152cedd8c344aa45abe514e99b22bfcb537b4c6fd0d08a1063831fe4a68",
        "warmup_time": -1
    },
    "benchmarks.TimeJoin.time_join": {
        "code": "class TimeJoin:\n    def time_join(self, impl, data_type, data_size, how, sort):\n        self.df1.join(\n            self.df2, on=self.df1.columns[0], how=how, lsuffix=\"left_\", sort=sort\n        )\n\n    def setup(self, impl, data_type, data_size, how, sort):\n        self.df1 = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            impl, data_type, data_size[2], data_size[3], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeJoin.time_join",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "how",
            "sort"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100, 2000, 100)"
            ],
            [
                "'left'",
                "'right'",
                "'outer'",
                "'inner'"
            ],
            [
                "False",
                "True"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "39cc203941b3912bc186bbee45ea93cb333ddc504233be3321cb174cf88855ef",
        "warmup_time": -1
    },
    "benchmarks.TimeMerge.time_merge": {
        "code": "class TimeMerge:\n    def time_merge(self, impl, data_type, data_size, how, sort):\n        self.df1.merge(self.df2, on=self.df1.columns[0], how=how, sort=sort)\n\n    def setup(self, impl, data_type, data_size, how, sort):\n        self.df1 = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            impl, data_type, data_size[2], data_size[3], RAND_LOW, RAND_HIGH\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeMerge.time_merge",
        "number": 0,
        "param_names": [
            "impl",
            "data_type",
            "data_size",
            "how",
            "sort"
        ],
        "params": [
            [
                "'modin'",
                "'pandas'"
            ],
            [
                "'int'"
            ],
            [
                "(2000, 100, 2000, 100)"
            ],
            [
                "'left'",
                "'right'",
                "'outer'",
                "'inner'"
            ],
            [
                "False",
                "True"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4e07a06905444f38bd987d0530f18d1232b1d387be4d687b6a7b4d6c864c184c",
        "warmup_time": -1
    },
    "version": 2
}